name: Release

on:
  push:
    tags:
      - 'v*' # Push events matching v1.0, v20.15.10, etc.

permissions:
  contents: write

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact: windows
            build_cmd: npm run package:win
            dist_dir: win
          - os: ubuntu-latest
            artifact: linux
            build_cmd: npm run package:linux
            dist_dir: linux
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          
      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpulse-dev build-essential libasound2-dev libpulse-mainloop-glib0

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build application
        run: ${{ matrix.build_cmd }}
        
      - name: List files in dist directory
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "--- Contents of dist/ ---"
          ls -la dist/
          echo "--- Contents of dist/${{ matrix.dist_dir }}/ ---"
          ls -la dist/${{ matrix.dist_dir }} || echo "Directory not found"
          
      - name: List files in dist directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "--- Contents of dist/ ---"
          Get-ChildItem -Path dist -Force
          echo "--- Contents of dist/${{ matrix.dist_dir }}/ ---"
          if (Test-Path "dist/${{ matrix.dist_dir }}") {
            Get-ChildItem -Path "dist/${{ matrix.dist_dir }}" -Force
          } else {
            echo "Directory not found"
          }

      - name: Create release directory and package release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release
          node package-release.js
          
      - name: Create release directory and package release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path release | Out-Null
          node package-release.js

      - name: Rename release files for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          $windowsZip = Get-ChildItem -Path release -Filter "volume-control-windows-*.zip" | Select-Object -First 1
          if ($windowsZip) {
            $newName = "volume-control-windows-v$version.zip"
            # Only rename if the filename is different
            if ($windowsZip.Name -ne $newName) {
              Rename-Item -Path $windowsZip.FullName -NewName $newName -Force
              Write-Host "Renamed $($windowsZip.Name) to $newName"
            } else {
              Write-Host "File already has the correct name: $($windowsZip.FullName)"
            }
          } else {
            Write-Error "Windows release zip not found"
            exit 1
          }

      - name: Rename release files for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          version=$(node -p "require('./package.json').version")
          linux_zip=$(find release -name "volume-control-linux-*.zip" | head -1)
          if [ -f "$linux_zip" ]; then
            new_name="volume-control-linux-v$version.zip"
            # Only rename if the filename is different
            if [ "$(basename "$linux_zip")" != "$new_name" ]; then
              mv "$linux_zip" "release/$new_name"
              echo "Renamed to $new_name"
            else
              echo "File already has the correct name: $linux_zip"
            fi
          else
            echo "Linux release zip not found"
            exit 1
          fi

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/${{ matrix.dist_dir }}
            release/volume-control-windows-v*.zip
          if-no-files-found: error
          retention-days: 1
          
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/${{ matrix.dist_dir }}
            release/volume-control-linux-v*.zip
          if-no-files-found: error
          retention-days: 1

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: release

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: release

      - name: List downloaded files
        run: find release -type f -name '*.zip' -exec ls -la {} \;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: |
            ## What's New in ${{ github.ref_name }}
            - Pre-built packages for Windows and Linux
            - Improved packaging and distribution
            
            ### Download Links
            - **Windows x64**: [volume-control-windows-${{ github.ref_name }}.zip](https://github.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/${{ github.ref_name }}/volume-control-windows-${{ github.ref_name }}.zip)
            - **Linux x64**: [volume-control-linux-${{ github.ref_name }}.zip](https://github.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/${{ github.ref_name }}/volume-control-linux-${{ github.ref_name }}.zip)
            
            ### Installation
            1. Download the appropriate zip file for your platform
            2. Extract the zip file
            3. Run the application:
               - Windows: Double-click `volume-control.exe`
               - Linux: Run `chmod +x volume-control` then `./volume-control`
          draft: false
          prerelease: false
          files: |
            release/volume-control-windows-*.zip
            release/volume-control-linux-*.zip

  update-readme:
    name: Update README
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main  # Explicitly checkout main branch

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git config --global pull.rebase false

      - name: Ensure we're on main branch
        run: |
          git checkout main
          git pull origin main

      - name: Update download links in README
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          # Update the download links
          sed -i 's|https://github\.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/volume-control-windows-v[0-9]*\.[0-9]*\.[0-9]*\.zip|https://github.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/${VERSION}/volume-control-windows-v${VERSION}.zip|g' README.md
          sed -i 's|https://github\.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/v[0-9]*\.[0-9]*\.[0-9]*/volume-control-linux-v[0-9]*\.[0-9]*\.[0-9]*\.zip|https://github.com/Volodymyr-Bauzi/PC-Volume-controll-using-mobile/releases/download/${VERSION}/volume-control-linux-v${VERSION}.zip|g' README.md
          
      - name: Commit and push changes
        run: |
          # Check if there are any changes to commit
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "docs: update download links for ${GITHUB_REF_NAME}"
            # Force push to ensure we're up to date
            git pull --rebase origin main
            git push origin main
            echo "✅ Updated README with new version links"
          else
            echo "ℹ️ No changes to commit in README"
          fi
